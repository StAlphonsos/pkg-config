From b564b111ec64f936290dd6f31d9c83d9c7183b39 Mon Sep 17 00:00:00 2001
From: Jasper Lievisse Adriaanse <jasper@humppa.nl>
Date: Sun, 6 Mar 2011 21:02:20 +0100
Subject: [PATCH 05/14] - implement handling of alpha/beta versions, still needs some polishing in handle_config()

---
 pkg-config |   79 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++---
 1 files changed, 75 insertions(+), 4 deletions(-)

diff --git a/pkg-config b/pkg-config
index ad2bc7c..d73cc20 100644
--- a/pkg-config
+++ b/pkg-config
@@ -242,7 +242,9 @@ sub handle_config
 		my $deps = $cfg->get_property('Requires', $variables);
 		if (defined $deps) {
 			for my $dep (@$deps) {
-				if ($dep =~ m/^(.*?)\s*([<=>]+)\s*([\d\.]+)$/) {
+				# XXX: instead of ([\w\.]+) use something like this?
+				# (([\d\.]+|[\d\.]+[\w]*[\d]+))
+				if ($dep =~ m/^(.*?)\s*([<=>]+)\s*([\w\.]+)$/) {
 					handle_config($1, $2, $3, $list);
 				} else {
 					handle_config($dep, undef, undef, $list);
@@ -255,7 +257,7 @@ sub handle_config
 		$deps = $cfg->get_property('Requires.private', $variables);
 		if (defined $deps) {
 			for my $dep (@$deps) {
-				if ($dep =~ m/^(.*?)\s*([<=>]+)\s*([\d\.]+)$/) {
+				if ($dep =~ m/^(.*?)\s*([<=>]+)\s*([\w\.]+)$/) {
 					handle_config($1, $2, $3, $list);
 				} else {
 					handle_config($dep, undef, undef, $list);
@@ -522,15 +524,84 @@ sub self_version
 sub compare
 {
 	my ($a, $b) = @_;
+	my ($full_a, $full_b) = ($a, $b);
+	my (@suffix_a, @suffix_b);
 
 	return 0 if ($a eq $b);
 
+	# is there a valid non-numeric suffix to deal with later?
+	# only a(lpha) and b(eta) are allowed.
+	if ($a =~ m/(beta|b|alpha|a)([\d]+)$/) {
+		print STDERR "valid suffix $1$2 found in $a.\n" if $D;
+		$suffix_a[0] = $1;
+		$suffix_a[1] = $2;
+		$a =~ s/$suffix_a[0]$suffix_a[1]//g;
+	}
+
+	if ($b =~ m/(beta|b|alpha|a)([\d]+)$/) {
+		print STDERR "valid suffix $1$2 found in $b.\n" if $D;
+		$suffix_b[0] = $1;
+		$suffix_b[1] = $2;
+		$b =~ s/$suffix_b[0]$suffix_b[1]//g;
+	}
+
 	my @a = split /\./, $a;
 	my @b = split /\./, $b;
 
 	while (@a && @b) { #so long as both lists have something
-		return 1 if $a[0] > $b[0];
-		return -1 if $a[0] < $b[0];
+		if (!(@suffix_a || @suffix_b)) {
+			# simple comparison when no suffixes are in the game.
+			return 1 if $a[0] > $b[0];
+			return -1 if $a[0] < $b[0];
+		} else {
+			# extended comparison.
+			if (((scalar(@a) == 1) || (scalar(@b) == 1)) && ($a[0] == $b[0])){
+				# one of the arrays has reached the last element,
+				# compare the suffix.
+
+				# directly compare suffixes, provided both suffixes
+				# are present.
+				if (@suffix_a && @suffix_b) {
+
+					# both are alpha or beta, compare on numeric
+					if ((($suffix_a[0] =~ /^b.*/) &&
+					     ($suffix_b[0] =~ /^b.*/)) ||
+					    (($suffix_a[0] =~ /^a.*/) &&
+					     ($suffix_b[0] =~ /^a.*/))) {
+						return 0 if ($suffix_a[1] == $suffix_b[1]);
+						return 1 if ($suffix_a[1] > $suffix_b[1]);
+						return -1 if ($suffix_a[1] < $suffix_b[1]);
+					}
+
+					# a is beta, thus beating b.
+					if (($suffix_a[0] =~ /^b(eta)?/) &&
+					    ($suffix_b[0] =~ /^a(lpha)?/)) {
+						print STDERR "$full_a (installed) > $full_b (wanted)\n" if $D;
+						return 1;
+					} else { # b is beta, thus beating a.
+						print STDERR "$full_a (installed) < $full_b (wanted)\n" if $D;
+						return -1;
+					}
+				} else {
+					# one of either is lacking a suffix,
+					# thereby beating the other.
+					# e.g.: 1.02 > 1.02b1
+					if (@suffix_a) { # a is older
+						print STDERR "$full_a (installed) < $full_b (wanted)\n" if $D;
+						return -1;
+					}
+
+					if (@suffix_b) { # b is older
+						print STDERR "$full_a (installed) > $full_b (wanted)\n" if $D;
+						return 1;
+					}
+				}
+				
+			} else {
+				return 1 if $a[0] > $b[0];
+				return -1 if $a[0] < $b[0];
+			}
+		}
 		shift @a; shift @b;
 	}
 	return 1 if @a;
-- 
1.7.3.5

